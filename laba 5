"""Задана рекуррентная функция. Область определения функции – натуральные числа. 
Написать программу сравнительного вычисления данной функции рекурсивно и итерационно (значение, время). 
Определить (смоделировать) границы применимости рекурсивного и итерационного подхода.
Результаты сравнительного исследования времени вычисления представить в табличной и графической форме.
F(0) = F(1) = 3; F(n) =(-1)n*(3-F(n-1) /(2n)!-(n-2)) (при n >23), F(n)=(n-2) * F(n-1) (при 1<n<=23)"""

import timeit
import matplotlib.pyplot as plt
import math

last_factorial = 1
def dynamic_factorial(n):
    global last_factorial
    last_factorial = n * last_factorial
    return last_factorial

def recursive_factorial(n):
    if n == 1 or n==0:
        return 1
    else:
        return n * recursive_factorial(n-1)

def iterative_factorial(n):
    result = 1
    for i in range(2, n+1):
        result *= i
    return result

last_F_value = 1;

step = 1
def recursive_F(n):
    global last_F_value
    if n == 0 or n == 1:
        return 3
    elif n > 23:
        global step
        step *= -1
        last_F_value = step * (3 - recursive_F(n - 1) / recursive_factorial(2 * n) - (n - 2))
        return last_F_value
    elif n <= 23 and n > 1:
        last_F_value (n - 2) * recursive_F(n - 1)
        return last_F_value

def score_time(func, n):
    return timeit.timeit(lambda: func(n), number=1000)


n_values = range(1, 26)
recursive_times = []
iterative_times = []

for n in n_values:
    recursive_times.append(score_time(recursive_factorial, n))
    iterative_times.append(score_time(iterative_factorial, n))

print(f"{'n':<10}{'Рекурсивное время (мс)':<25}{'Итерационное время (мс)':<25}")
for i, n in enumerate(n_values):
    print(f"{n:<10}{recursive_times[i]:<25}{iterative_times[i]:<25}")

plt.plot(n_values, recursive_times, label='Рекурсивно')
plt.plot(n_values, iterative_times, label='Итерационно')
plt.xlabel('n')
plt.ylabel('Время (в миллисекундах)')
plt.legend()
plt.title('Сравнение времени вычисления функции F(n)')
plt.show()
